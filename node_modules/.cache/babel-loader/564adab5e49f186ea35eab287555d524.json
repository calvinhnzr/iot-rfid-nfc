{"ast":null,"code":"var _jsxFileName = \"/Users/calvinhnzr/Development/mandelbrotset/src/templates/Visual.js\",\n    _s = $RefreshSig$();\n\nimport * as THREE from \"three\";\nimport { useState, useRef, useContext, useEffect } from \"react\";\nimport { Context } from \"../Context\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { tomorrowNight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport styled from \"styled-components\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Visual = () => {\n  _s();\n\n  const {\n    currentPage,\n    setCurrentPage\n  } = useContext(Context);\n  const [mandelbrot, setMandelbrot] = useState(false);\n  const canvasRef = useRef(null);\n  let numberOfIteration = 20;\n\n  function fragmentShader() {\n    return `\nprecision highp float;\nuniform vec2 res;\nuniform float aspect;\nuniform float zoom;\nuniform vec2 offset;\n\n// gui parameters\nuniform vec3 pset1;\nuniform vec3 pset2;\n\nvec2 cm (vec2 a, vec2 b){\n  return vec2(a.x*b.x - a.y*b.y, a.x*b.y + b.x*a.y);\n}\n\nvec2 conj (vec2 a){\n  return vec2(a.x, -a.y);\n}\n\nfloat mandelbrot(vec2 c){\n  // 1.0\n\tfloat alpha = 1.0;\n  vec2 z = vec2(0.0 , 0.0);\n  vec2 z_0;\n  vec2 z_1;\n  vec2 z_2;\n\n\t// i < 200\n  for(int i=0; i < ${numberOfIteration}; i++){  // i < max iterations\n    z_2 = z_1;\n    z_1 = z_0;\n    z_0 = z;\n\n    float x_0_sq = z_0.x*z_0.x;\n    float y_0_sq = z_0.y*z_0.y;\n    vec2 z_0_sq = vec2(x_0_sq - y_0_sq, 2.0*z_0.x*z_0.y);\n    float x_1_sq = z_1.x*z_1.x;\n    float y_1_sq = z_1.y*z_1.y;\n    vec2 z_1_sq = vec2(x_1_sq - y_1_sq, 2.0*z_1.x*z_1.y);\n\n    // the recurrence equation\n    z = pset1.x*z_0_sq + c + pset1.y*z_1_sq\n    + pset1.z*cm(z_1_sq, z_2) + pset2.x*cm(z_1_sq, z_0)\n    + pset2.y*cm(z_2, z_0) + pset2.z*cm(z_1, z_2);\n\n    float z_0_mag = x_0_sq + y_0_sq;\n    float z_1_mag = x_1_sq + y_1_sq;\n\n\t\t// if(z_0_mag > 12.0){\n    if(z_0_mag > 10.0){\n      float frac = (12.0 - z_1_mag) / (z_0_mag - z_1_mag);\n      alpha = (float(i) - 1.0 + frac)/200.0; // should be same as max iterations\n      break;\n    }\n  }\n\n  return alpha;\n}\n\nvoid main(){ // gl_FragCoord in [0,1]\n  vec2 uv = zoom * vec2(aspect, 1.0) * gl_FragCoord.xy / res + offset;\n  float s = 1.0 - mandelbrot(uv);\n\n\tif(s<0.3){\n    s=.666;\n  }\n  \n\tvec3 coord = vec3(s,s,s);\n  //gl_FragColor = vec4(pow(coord, vec3(5.38, 6.15, 3.85)), 1.0);\n\tgl_FragColor = vec4(pow(coord, vec3(5.1, 5.0, 4.87)), 1.0);\n\t\n\n}\n  `;\n  }\n\n  var uniforms;\n  var aspect = window.innerWidth / window.innerHeight; // var aspect = canvasWidth / canvasHeight\n  // var zoom = 2.0\n\n  var zoom = 0.05; // var offset = new THREE.Vector2(-2.0 * aspect, -2.0)\n\n  var offset = new THREE.Vector2((-zoom - 0.2) * aspect, -zoom);\n  let parameters = {\n    a: 1.01,\n    b: 0.01,\n    c: 0.01,\n    d: 0.01,\n    e: 0.01,\n    f: 0.01\n  };\n  uniforms = {\n    res: {\n      type: \"vec2\",\n      value: new THREE.Vector2(window.innerWidth, window.innerHeight)\n    },\n    aspect: {\n      type: \"float\",\n      value: aspect\n    },\n    zoom: {\n      type: \"float\",\n      value: zoom\n    },\n    offset: {\n      type: \"vec2\",\n      value: offset\n    },\n    pset1: {\n      type: \"vec3\",\n      value: new THREE.Vector3(parameters[\"a\"], parameters[\"b\"], parameters[\"c\"])\n    },\n    pset2: {\n      type: \"vec3\",\n      value: new THREE.Vector3(parameters[\"d\"], parameters[\"e\"], parameters[\"f\"])\n    }\n  }; // window.addEventListener(\"resize\", windowResize, false)\n  // function windowResize() {\n  // \t//aspect intentionaly not updated\n  // \taspect = window.innerWidth / window.innerHeight\n  // \tcamera.aspect = aspect\n  // \tcamera.updateProjectionMatrix()\n  // \trenderer.setSize(window.innerWidth, window.innerHeight - 2)\n  // }\n  // check if mouse is on card, useffect\n\n  document.addEventListener(\"wheel\", scroll);\n\n  function scroll(event) {\n    let zoom_0 = zoom;\n\n    if (\"wheelDeltaY\" in event) {\n      // chrome vs. firefox\n      //zoom *= 1 + event.wheelDeltaY * 0.0003\n      zoom *= 1 - event.wheelDeltaY * 0.0003;\n    } else {\n      zoom *= 1 + event.deltaY * 0.01;\n    }\n\n    let space = zoom - zoom_0; // let mouseX = event.clientX / window.innerWidth\n    // let mouseY = 1 - event.clientY / window.innerHeight\n\n    let mouseX = 1;\n    let mouseY = 1;\n    offset = offset.add(new THREE.Vector2(-mouseX * space * aspect, -mouseY * space));\n    uniforms[\"zoom\"][\"value\"] = zoom;\n    uniforms[\"offset\"][\"value\"] = offset;\n  }\n\n  const CanvasContainer = styled.div`\n\t\tgrid-row: 1 / 13;\n\t\tgrid-column: 1 / 13;\n\t\tbackground-color: rgb(32, 33, 35);\n\t\t/* border-radius: 0.5rem; */\n\t`;\n  const Container = styled.div`\n\t\tgrid-row: 1 / 13;\n\t\tgrid-column: 2 / 10;\n\t\t/* outline: 1px solid white; */\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tz-index: 100;\n\t\t> pre {\n\t\t\tbackground: none !important;\n\t\t\tborder: none !important;\n\t\t\topacity: 1;\n\t\t\t&::before {\n\t\t\t\tdisplay: block;\n\t\t\t\tcontent: \"\";\n\t\t\t\theight: 6rem;\n\t\t\t}\n\t\t}\n\t`;\n  const StyledCheckBox = styled.label`\n\t\t/* outline: 1px solid white; */\n\t\tpadding-top: 6rem;\n\t\tgrid-row: 1 / 4;\n\t\tgrid-column: 11 / 13;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\twidth: fit-content;\n\t\theight: fit-content;\n\t\tz-index: 200;\n\t\tfont-size: 1.2rem;\n\t\tfont-weight: 100;\n\t\t/* text-decoration: underline; */\n\t\tcursor: pointer;\n\t\tinput {\n\t\t\tmargin-left: 1rem;\n\t\t\theight: 1.5rem;\n\t\t\twidth: 1.5rem;\n\t\t}\n\t`;\n  const codeString = `<!DOCTYPE html>\n<html lang=\"de\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t<meta name=\"keywords\" content=\"mandelbrot, react, three\" />\n\t\t<meta name=\"author\" content=\"Calvin Hinzer\" />\n\t\t<meta name=\"description\" content=\"this took way too long\" />\n\t\t<title>Mandelbrotmenge</title>\n\t</head>\n\t<body>\n\t\t<canvas id=\"myCanvas\" width=\"800\" height=\"800\"></canvas>\n\t\t<script>\n\t\t\tvar canvas = document.getElementById(\"myCanvas\")\n\t\t\tvar context = canvas.getContext(\"2d\")\n\n\t\t\t// Durchlaufe alle Zeilen des zu zeichnenden Bildes\n\t\t\tfor (var pixelzeile = 0; pixelzeile < 200; pixelzeile++) {\n\t\t\t\t// Durchlaufe alle Spalten der jeweiligen Zeile\n\t\t\t\tfor (var pixelspalte = 0; pixelspalte < 200; pixelspalte++) {\n\n\t\t\t\t\t// Zähler für Iterationen für aktuelles Pixel\n\t\t\t\t\tvar iterationen = 0\n\n\t\t\t\t\t// Berechnung der X-Verschiebung für bessere Darstellung\n\t\t\t\t\tvar xverschiebung = -2 + pixelzeile / 50\n\n\t\t\t\t\t// Berechnung der Y-Verschiebung für bessere Darstellung\n\t\t\t\t\tvar yverschiebung = -2 + pixelspalte / 50\n\n\t\t\t\t\t// Anlegen/Nullen der Variable für den Realteil des Punktes über den iteriert wird\n\t\t\t\t\tvar zx = 0\n\n\t\t\t\t\t// Anlegen/Nullen der Variable für den Imaginärteilteil des Punktes über den iteriert wird\n\t\t\t\t\tvar zy = 0\n\n\t\t\t\t\t// While-Schleife in der die tatsächliche Iterierung stattfindet. Bruchbedingungen sind maximal 255 Iterationen (aufgrund von Performance) oder das Überschreiten der Grenze 4 (siehe Beweis) durch Quadrierung des Betrags der jeweiligen Iteration\n\t\t\t\t\twhile (iterationen < 255 && zx * zx + zy * zy < 4) {\n\n\t\t\t\t\t\t// Temporäre Variable in der Produkt aus Imaginär- und Realteil gespeichert wird\n\t\t\t\t\t\tvar xtemp = zx * zy\n\n\t\t\t\t\t\t// Überschreiben des Realanteils durch Realanteil des Quadrats der komplexen Zahl, ausnutzen von (zx+zy)*(zx+zy)=zx^2-zy^2+2*zx*zy\n\t\t\t\t\t\tzx = zx * zx - zy * zy + xverschiebung\n\n\t\t\t\t\t\t// Überschreiben des Imaginäranteils durch Imaginäranteil des Quadrats der komplexen Zahl\n\t\t\t\t\t\tzy = 2 * xtemp + yverschiebung\n\n\t\t\t\t\t\t// Erhöhen des Iterationszählers\n\t\t\t\t\t\titerationen++\n\t\t\t\t\t}\n\n\t\t\t\t\t// Festlegen eines RGB-Werts für jeweiliges Pixel abhängig von Anzahl durchlaufender Iterationen\n\t\t\t\t\tvar color = iterationen.toString(16)\n\n\t\t\t\t\t// Element für Pixel anlegen\n\t\t\t\t\tcontext.beginPath()\n\n\t\t\t\t\t// Entsprechenden Block füllen\n\t\t\t\t\tcontext.rect(pixelzeile * 4, pixelspalte * 4, 4, 4)\n\n\t\t\t\t\t// Farbe für Block festlegen\n\t\t\t\t\tcontext.fillStyle = \"#\" + color + color + color\n\n\t\t\t\t\t// Block zeichnen\n\t\t\t\t\tcontext.fill()\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>`;\n\n  function renderMandelbrot() {\n    return /*#__PURE__*/_jsxDEV(Canvas, {\n      gl: {\n        powerPreference: \"high-performance\",\n        antialias: false\n      },\n      dpr: [1, 2],\n      camera: {\n        // default: 75\n        fov: 75,\n        near: 0.1,\n        far: 1000,\n        position: [0, 0, 1]\n      },\n      children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n        children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n          args: [5, 5]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n          uniforms: uniforms,\n          fragmentShader: fragmentShader()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 4\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        language: \"javascript\",\n        style: tomorrowNight,\n        showLineNumbers: true,\n        wrapLongLines: true,\n        useInlineStyles: true,\n        customStyle: {\n          padding: \"0 0 100% 1rem\",\n          lineHeight: \"1.6\",\n          fontSize: \"1.3rem\",\n          color: \"white\",\n          fontFamily: \"Roboto\",\n          letterSpacing: \"1px\",\n          fontWeight: 400,\n          textShadow: \"0px 0px 25px rgba(0, 0, 0, 0.6)\"\n        },\n        children: codeString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(CanvasContainer, {\n      ref: canvasRef,\n      style: currentPage == 9 ? {\n        opacity: 1\n      } : {\n        opacity: 0\n      },\n      children: currentPage == 9 ? renderMandelbrot() : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Visual, \"Em2E3ok8C/XYwhMrydqMv/DAvzw=\");\n\n_c = Visual;\nexport default Visual;\n\nvar _c;\n\n$RefreshReg$(_c, \"Visual\");","map":{"version":3,"sources":["/Users/calvinhnzr/Development/mandelbrotset/src/templates/Visual.js"],"names":["THREE","useState","useRef","useContext","useEffect","Context","SyntaxHighlighter","tomorrowNight","styled","Canvas","Visual","currentPage","setCurrentPage","mandelbrot","setMandelbrot","canvasRef","numberOfIteration","fragmentShader","uniforms","aspect","window","innerWidth","innerHeight","zoom","offset","Vector2","parameters","a","b","c","d","e","f","res","type","value","pset1","Vector3","pset2","document","addEventListener","scroll","event","zoom_0","wheelDeltaY","deltaY","space","mouseX","mouseY","add","CanvasContainer","div","Container","StyledCheckBox","label","codeString","renderMandelbrot","powerPreference","antialias","fov","near","far","position","padding","lineHeight","fontSize","color","fontFamily","letterSpacing","fontWeight","textShadow","opacity"],"mappings":"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IAAI,IAAImB,KAAK,CAACE,WAAN,GAAoB,MAAhC;AACA,KAJD,MAIO;AACNrB,MAAAA,IAAI,IAAI,IAAImB,KAAK,CAACG,MAAN,GAAe,IAA3B;AACA;;AAED,QAAIC,KAAK,GAAGvB,IAAI,GAAGoB,MAAnB,CAVsB,CAYtB;AACA;;AAEA,QAAII,MAAM,GAAG,CAAb;AACA,QAAIC,MAAM,GAAG,CAAb;AACAxB,IAAAA,MAAM,GAAGA,MAAM,CAACyB,GAAP,CACR,IAAIjD,KAAK,CAACyB,OAAV,CAAkB,CAACsB,MAAD,GAAUD,KAAV,GAAkB3B,MAApC,EAA4C,CAAC6B,MAAD,GAAUF,KAAtD,CADQ,CAAT;AAIA5B,IAAAA,QAAQ,CAAC,MAAD,CAAR,CAAiB,OAAjB,IAA4BK,IAA5B;AACAL,IAAAA,QAAQ,CAAC,QAAD,CAAR,CAAmB,OAAnB,IAA8BM,MAA9B;AACA;;AAED,QAAM0B,eAAe,GAAG1C,MAAM,CAAC2C,GAAI;AACpC;AACA;AACA;AACA;AACA,EALC;AAOA,QAAMC,SAAS,GAAG5C,MAAM,CAAC2C,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAjBC;AAmBA,QAAME,cAAc,GAAG7C,MAAM,CAAC8C,KAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAnBC;AAqBA,QAAMC,UAAU,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAtEC;;AAwEA,WAASC,gBAAT,GAA4B;AAC3B,wBACC,QAAC,MAAD;AACC,MAAA,EAAE,EAAE;AACHC,QAAAA,eAAe,EAAE,kBADd;AAEHC,QAAAA,SAAS,EAAE;AAFR,OADL;AAKC,MAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,CALN;AAMC,MAAA,MAAM,EAAE;AACP;AACAC,QAAAA,GAAG,EAAE,EAFE;AAGPC,QAAAA,IAAI,EAAE,GAHC;AAIPC,QAAAA,GAAG,EAAE,IAJE;AAKPC,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AALH,OANT;AAAA,6BAaC;AAAA,gCACC;AAAqB,UAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA3B;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AACC,UAAA,QAAQ,EAAE5C,QADX;AAEC,UAAA,cAAc,EAAED,cAAc;AAF/B;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAbD;AAAA;AAAA;AAAA;AAAA,YADD;AAuBA;;AAED,sBACC;AAAA,4BASC,QAAC,SAAD;AAAA,6BACC,QAAC,iBAAD;AACC,QAAA,QAAQ,EAAC,YADV;AAEC,QAAA,KAAK,EAAEV,aAFR;AAGC,QAAA,eAAe,MAHhB;AAIC,QAAA,aAAa,MAJd;AAKC,QAAA,eAAe,EAAE,IALlB;AAMC,QAAA,WAAW,EAAE;AACZwD,UAAAA,OAAO,EAAE,eADG;AAEZC,UAAAA,UAAU,EAAE,KAFA;AAGZC,UAAAA,QAAQ,EAAE,QAHE;AAIZC,UAAAA,KAAK,EAAE,OAJK;AAKZC,UAAAA,UAAU,EAAE,QALA;AAMZC,UAAAA,aAAa,EAAE,KANH;AAOZC,UAAAA,UAAU,EAAE,GAPA;AAQZC,UAAAA,UAAU,EAAE;AARA,SANd;AAAA,kBAgBEf;AAhBF;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YATD,eA6BC,QAAC,eAAD;AACC,MAAA,GAAG,EAAExC,SADN;AAEC,MAAA,KAAK,EAAEJ,WAAW,IAAI,CAAf,GAAmB;AAAE4D,QAAAA,OAAO,EAAE;AAAX,OAAnB,GAAoC;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAF5C;AAAA,gBAGE5D,WAAW,IAAI,CAAf,GAAmB6C,gBAAgB,EAAnC,GAAwC;AAH1C;AAAA;AAAA;AAAA;AAAA,YA7BD;AAAA,kBADD;AAqCA,CA9VD;;GAAM9C,M;;KAAAA,M;AA+VN,eAAeA,MAAf","sourcesContent":["import * as THREE from \"three\"\nimport { useState, useRef, useContext, useEffect } from \"react\"\n\nimport { Context } from \"../Context\"\nimport SyntaxHighlighter from \"react-syntax-highlighter\"\nimport { tomorrowNight } from \"react-syntax-highlighter/dist/esm/styles/hljs\"\n\nimport styled from \"styled-components\"\n\nimport { Canvas } from \"@react-three/fiber\"\n\nconst Visual = () => {\n\tconst { currentPage, setCurrentPage } = useContext(Context)\n\tconst [mandelbrot, setMandelbrot] = useState(false)\n\tconst canvasRef = useRef(null)\n\n\tlet numberOfIteration = 20\n\n\tfunction fragmentShader() {\n\t\treturn `\nprecision highp float;\nuniform vec2 res;\nuniform float aspect;\nuniform float zoom;\nuniform vec2 offset;\n\n// gui parameters\nuniform vec3 pset1;\nuniform vec3 pset2;\n\nvec2 cm (vec2 a, vec2 b){\n  return vec2(a.x*b.x - a.y*b.y, a.x*b.y + b.x*a.y);\n}\n\nvec2 conj (vec2 a){\n  return vec2(a.x, -a.y);\n}\n\nfloat mandelbrot(vec2 c){\n  // 1.0\n\tfloat alpha = 1.0;\n  vec2 z = vec2(0.0 , 0.0);\n  vec2 z_0;\n  vec2 z_1;\n  vec2 z_2;\n\n\t// i < 200\n  for(int i=0; i < ${numberOfIteration}; i++){  // i < max iterations\n    z_2 = z_1;\n    z_1 = z_0;\n    z_0 = z;\n\n    float x_0_sq = z_0.x*z_0.x;\n    float y_0_sq = z_0.y*z_0.y;\n    vec2 z_0_sq = vec2(x_0_sq - y_0_sq, 2.0*z_0.x*z_0.y);\n    float x_1_sq = z_1.x*z_1.x;\n    float y_1_sq = z_1.y*z_1.y;\n    vec2 z_1_sq = vec2(x_1_sq - y_1_sq, 2.0*z_1.x*z_1.y);\n\n    // the recurrence equation\n    z = pset1.x*z_0_sq + c + pset1.y*z_1_sq\n    + pset1.z*cm(z_1_sq, z_2) + pset2.x*cm(z_1_sq, z_0)\n    + pset2.y*cm(z_2, z_0) + pset2.z*cm(z_1, z_2);\n\n    float z_0_mag = x_0_sq + y_0_sq;\n    float z_1_mag = x_1_sq + y_1_sq;\n\n\t\t// if(z_0_mag > 12.0){\n    if(z_0_mag > 10.0){\n      float frac = (12.0 - z_1_mag) / (z_0_mag - z_1_mag);\n      alpha = (float(i) - 1.0 + frac)/200.0; // should be same as max iterations\n      break;\n    }\n  }\n\n  return alpha;\n}\n\nvoid main(){ // gl_FragCoord in [0,1]\n  vec2 uv = zoom * vec2(aspect, 1.0) * gl_FragCoord.xy / res + offset;\n  float s = 1.0 - mandelbrot(uv);\n\n\tif(s<0.3){\n    s=.666;\n  }\n  \n\tvec3 coord = vec3(s,s,s);\n  //gl_FragColor = vec4(pow(coord, vec3(5.38, 6.15, 3.85)), 1.0);\n\tgl_FragColor = vec4(pow(coord, vec3(5.1, 5.0, 4.87)), 1.0);\n\t\n\n}\n  `\n\t}\n\tvar uniforms\n\n\tvar aspect = window.innerWidth / window.innerHeight\n\n\t// var aspect = canvasWidth / canvasHeight\n\n\t// var zoom = 2.0\n\tvar zoom = 0.05\n\n\t// var offset = new THREE.Vector2(-2.0 * aspect, -2.0)\n\tvar offset = new THREE.Vector2((-zoom - 0.2) * aspect, -zoom)\n\n\tlet parameters = {\n\t\ta: 1.01,\n\t\tb: 0.01,\n\t\tc: 0.01,\n\t\td: 0.01,\n\t\te: 0.01,\n\t\tf: 0.01,\n\t}\n\n\tuniforms = {\n\t\tres: {\n\t\t\ttype: \"vec2\",\n\t\t\tvalue: new THREE.Vector2(window.innerWidth, window.innerHeight),\n\t\t},\n\t\taspect: { type: \"float\", value: aspect },\n\t\tzoom: { type: \"float\", value: zoom },\n\t\toffset: { type: \"vec2\", value: offset },\n\t\tpset1: {\n\t\t\ttype: \"vec3\",\n\t\t\tvalue: new THREE.Vector3(\n\t\t\t\tparameters[\"a\"],\n\t\t\t\tparameters[\"b\"],\n\t\t\t\tparameters[\"c\"]\n\t\t\t),\n\t\t},\n\t\tpset2: {\n\t\t\ttype: \"vec3\",\n\t\t\tvalue: new THREE.Vector3(\n\t\t\t\tparameters[\"d\"],\n\t\t\t\tparameters[\"e\"],\n\t\t\t\tparameters[\"f\"]\n\t\t\t),\n\t\t},\n\t}\n\n\t// window.addEventListener(\"resize\", windowResize, false)\n\n\t// function windowResize() {\n\t// \t//aspect intentionaly not updated\n\t// \taspect = window.innerWidth / window.innerHeight\n\t// \tcamera.aspect = aspect\n\t// \tcamera.updateProjectionMatrix()\n\t// \trenderer.setSize(window.innerWidth, window.innerHeight - 2)\n\t// }\n\n\t// check if mouse is on card, useffect\n\tdocument.addEventListener(\"wheel\", scroll)\n\n\tfunction scroll(event) {\n\t\tlet zoom_0 = zoom\n\t\tif (\"wheelDeltaY\" in event) {\n\t\t\t// chrome vs. firefox\n\t\t\t//zoom *= 1 + event.wheelDeltaY * 0.0003\n\t\t\tzoom *= 1 - event.wheelDeltaY * 0.0003\n\t\t} else {\n\t\t\tzoom *= 1 + event.deltaY * 0.01\n\t\t}\n\n\t\tlet space = zoom - zoom_0\n\n\t\t// let mouseX = event.clientX / window.innerWidth\n\t\t// let mouseY = 1 - event.clientY / window.innerHeight\n\n\t\tlet mouseX = 1\n\t\tlet mouseY = 1\n\t\toffset = offset.add(\n\t\t\tnew THREE.Vector2(-mouseX * space * aspect, -mouseY * space)\n\t\t)\n\n\t\tuniforms[\"zoom\"][\"value\"] = zoom\n\t\tuniforms[\"offset\"][\"value\"] = offset\n\t}\n\n\tconst CanvasContainer = styled.div`\n\t\tgrid-row: 1 / 13;\n\t\tgrid-column: 1 / 13;\n\t\tbackground-color: rgb(32, 33, 35);\n\t\t/* border-radius: 0.5rem; */\n\t`\n\n\tconst Container = styled.div`\n\t\tgrid-row: 1 / 13;\n\t\tgrid-column: 2 / 10;\n\t\t/* outline: 1px solid white; */\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tz-index: 100;\n\t\t> pre {\n\t\t\tbackground: none !important;\n\t\t\tborder: none !important;\n\t\t\topacity: 1;\n\t\t\t&::before {\n\t\t\t\tdisplay: block;\n\t\t\t\tcontent: \"\";\n\t\t\t\theight: 6rem;\n\t\t\t}\n\t\t}\n\t`\n\n\tconst StyledCheckBox = styled.label`\n\t\t/* outline: 1px solid white; */\n\t\tpadding-top: 6rem;\n\t\tgrid-row: 1 / 4;\n\t\tgrid-column: 11 / 13;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\twidth: fit-content;\n\t\theight: fit-content;\n\t\tz-index: 200;\n\t\tfont-size: 1.2rem;\n\t\tfont-weight: 100;\n\t\t/* text-decoration: underline; */\n\t\tcursor: pointer;\n\t\tinput {\n\t\t\tmargin-left: 1rem;\n\t\t\theight: 1.5rem;\n\t\t\twidth: 1.5rem;\n\t\t}\n\t`\n\n\tconst codeString = `<!DOCTYPE html>\n<html lang=\"de\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n\t\t<meta name=\"keywords\" content=\"mandelbrot, react, three\" />\n\t\t<meta name=\"author\" content=\"Calvin Hinzer\" />\n\t\t<meta name=\"description\" content=\"this took way too long\" />\n\t\t<title>Mandelbrotmenge</title>\n\t</head>\n\t<body>\n\t\t<canvas id=\"myCanvas\" width=\"800\" height=\"800\"></canvas>\n\t\t<script>\n\t\t\tvar canvas = document.getElementById(\"myCanvas\")\n\t\t\tvar context = canvas.getContext(\"2d\")\n\n\t\t\t// Durchlaufe alle Zeilen des zu zeichnenden Bildes\n\t\t\tfor (var pixelzeile = 0; pixelzeile < 200; pixelzeile++) {\n\t\t\t\t// Durchlaufe alle Spalten der jeweiligen Zeile\n\t\t\t\tfor (var pixelspalte = 0; pixelspalte < 200; pixelspalte++) {\n\n\t\t\t\t\t// Zähler für Iterationen für aktuelles Pixel\n\t\t\t\t\tvar iterationen = 0\n\n\t\t\t\t\t// Berechnung der X-Verschiebung für bessere Darstellung\n\t\t\t\t\tvar xverschiebung = -2 + pixelzeile / 50\n\n\t\t\t\t\t// Berechnung der Y-Verschiebung für bessere Darstellung\n\t\t\t\t\tvar yverschiebung = -2 + pixelspalte / 50\n\n\t\t\t\t\t// Anlegen/Nullen der Variable für den Realteil des Punktes über den iteriert wird\n\t\t\t\t\tvar zx = 0\n\n\t\t\t\t\t// Anlegen/Nullen der Variable für den Imaginärteilteil des Punktes über den iteriert wird\n\t\t\t\t\tvar zy = 0\n\n\t\t\t\t\t// While-Schleife in der die tatsächliche Iterierung stattfindet. Bruchbedingungen sind maximal 255 Iterationen (aufgrund von Performance) oder das Überschreiten der Grenze 4 (siehe Beweis) durch Quadrierung des Betrags der jeweiligen Iteration\n\t\t\t\t\twhile (iterationen < 255 && zx * zx + zy * zy < 4) {\n\n\t\t\t\t\t\t// Temporäre Variable in der Produkt aus Imaginär- und Realteil gespeichert wird\n\t\t\t\t\t\tvar xtemp = zx * zy\n\n\t\t\t\t\t\t// Überschreiben des Realanteils durch Realanteil des Quadrats der komplexen Zahl, ausnutzen von (zx+zy)*(zx+zy)=zx^2-zy^2+2*zx*zy\n\t\t\t\t\t\tzx = zx * zx - zy * zy + xverschiebung\n\n\t\t\t\t\t\t// Überschreiben des Imaginäranteils durch Imaginäranteil des Quadrats der komplexen Zahl\n\t\t\t\t\t\tzy = 2 * xtemp + yverschiebung\n\n\t\t\t\t\t\t// Erhöhen des Iterationszählers\n\t\t\t\t\t\titerationen++\n\t\t\t\t\t}\n\n\t\t\t\t\t// Festlegen eines RGB-Werts für jeweiliges Pixel abhängig von Anzahl durchlaufender Iterationen\n\t\t\t\t\tvar color = iterationen.toString(16)\n\n\t\t\t\t\t// Element für Pixel anlegen\n\t\t\t\t\tcontext.beginPath()\n\n\t\t\t\t\t// Entsprechenden Block füllen\n\t\t\t\t\tcontext.rect(pixelzeile * 4, pixelspalte * 4, 4, 4)\n\n\t\t\t\t\t// Farbe für Block festlegen\n\t\t\t\t\tcontext.fillStyle = \"#\" + color + color + color\n\n\t\t\t\t\t// Block zeichnen\n\t\t\t\t\tcontext.fill()\n\t\t\t\t}\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>`\n\n\tfunction renderMandelbrot() {\n\t\treturn (\n\t\t\t<Canvas\n\t\t\t\tgl={{\n\t\t\t\t\tpowerPreference: \"high-performance\",\n\t\t\t\t\tantialias: false,\n\t\t\t\t}}\n\t\t\t\tdpr={[1, 2]}\n\t\t\t\tcamera={{\n\t\t\t\t\t// default: 75\n\t\t\t\t\tfov: 75,\n\t\t\t\t\tnear: 0.1,\n\t\t\t\t\tfar: 1000,\n\t\t\t\t\tposition: [0, 0, 1],\n\t\t\t\t}}>\n\t\t\t\t<mesh>\n\t\t\t\t\t<planeBufferGeometry args={[5, 5]} />\n\t\t\t\t\t<shaderMaterial\n\t\t\t\t\t\tuniforms={uniforms}\n\t\t\t\t\t\tfragmentShader={fragmentShader()}\n\t\t\t\t\t/>\n\t\t\t\t</mesh>\n\t\t\t</Canvas>\n\t\t)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{/* <StyledCheckBox>\n\t\t\t\tRender Mandelbrot\n\t\t\t\t<input\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tchecked={mandelbrot}\n\t\t\t\t\tonChange={() => setMandelbrot(!mandelbrot)}\n\t\t\t\t/>\n\t\t\t</StyledCheckBox> */}\n\t\t\t<Container>\n\t\t\t\t<SyntaxHighlighter\n\t\t\t\t\tlanguage=\"javascript\"\n\t\t\t\t\tstyle={tomorrowNight}\n\t\t\t\t\tshowLineNumbers\n\t\t\t\t\twrapLongLines\n\t\t\t\t\tuseInlineStyles={true}\n\t\t\t\t\tcustomStyle={{\n\t\t\t\t\t\tpadding: \"0 0 100% 1rem\",\n\t\t\t\t\t\tlineHeight: \"1.6\",\n\t\t\t\t\t\tfontSize: \"1.3rem\",\n\t\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\t\tfontFamily: \"Roboto\",\n\t\t\t\t\t\tletterSpacing: \"1px\",\n\t\t\t\t\t\tfontWeight: 400,\n\t\t\t\t\t\ttextShadow: \"0px 0px 25px rgba(0, 0, 0, 0.6)\",\n\t\t\t\t\t}}>\n\t\t\t\t\t{codeString}\n\t\t\t\t</SyntaxHighlighter>\n\t\t\t</Container>\n\t\t\t<CanvasContainer\n\t\t\t\tref={canvasRef}\n\t\t\t\tstyle={currentPage == 9 ? { opacity: 1 } : { opacity: 0 }}>\n\t\t\t\t{currentPage == 9 ? renderMandelbrot() : null}\n\t\t\t</CanvasContainer>\n\t\t</>\n\t)\n}\nexport default Visual\n"]},"metadata":{},"sourceType":"module"}