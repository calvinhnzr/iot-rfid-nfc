{"ast":null,"code":"var _jsxFileName = \"/Users/calvinhnzr/Development/iot-rfid-nfc/src/Context.js\",\n    _s = $RefreshSig$();\n\nimport { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nexport const Provider = props => {\n  _s();\n\n  // checks if an input element is used, disable keydown eventlistener\n  const [inputOnFocus, setInputOnFocus] = useState(false); // display current page\n\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasTouch, setHasTouch] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      inputOnFocus,\n      setInputOnFocus,\n      currentPage,\n      setCurrentPage,\n      hasTouch,\n      setHasTouch\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Provider, \"KBoLs+XHgMtyPayS+gizw+ANZdg=\");\n\n_c = Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["/Users/calvinhnzr/Development/iot-rfid-nfc/src/Context.js"],"names":["useState","createContext","Context","Provider","props","inputOnFocus","setInputOnFocus","currentPage","setCurrentPage","hasTouch","setHasTouch","children"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,aAAnB,QAAwC,OAAxC;;AAEA,OAAO,MAAMC,OAAO,gBAAGD,aAAa,EAA7B;AAEP,OAAO,MAAME,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAClC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD,CAFkC,CAGlC;;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;AAEA,sBACC,QAAC,OAAD,CAAS,QAAT;AACC,IAAA,KAAK,EAAE;AACNK,MAAAA,YADM;AAENC,MAAAA,eAFM;AAGNC,MAAAA,WAHM;AAINC,MAAAA,cAJM;AAKNC,MAAAA,QALM;AAMNC,MAAAA;AANM,KADR;AAAA,cASEN,KAAK,CAACO;AATR;AAAA;AAAA;AAAA;AAAA,UADD;AAaA,CApBM;;GAAMR,Q;;KAAAA,Q","sourcesContent":["import { useState, createContext } from \"react\"\n\nexport const Context = createContext()\n\nexport const Provider = (props) => {\n\t// checks if an input element is used, disable keydown eventlistener\n\tconst [inputOnFocus, setInputOnFocus] = useState(false)\n\t// display current page\n\tconst [currentPage, setCurrentPage] = useState(0)\n\tconst [hasTouch, setHasTouch] = useState(false)\n\n\treturn (\n\t\t<Context.Provider\n\t\t\tvalue={{\n\t\t\t\tinputOnFocus,\n\t\t\t\tsetInputOnFocus,\n\t\t\t\tcurrentPage,\n\t\t\t\tsetCurrentPage,\n\t\t\t\thasTouch,\n\t\t\t\tsetHasTouch,\n\t\t\t}}>\n\t\t\t{props.children}\n\t\t</Context.Provider>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}